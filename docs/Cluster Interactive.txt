https://campuscluster.illinois.edu/resources/docs/user-guide/

###########################################
Useful commands for the cluster terminal:
Check installed modules:
module avail

Check storage (each user has 2 GB soft limit, 4 GB hard limit for storage.  If above 2 GB, you have 7 days to delete files and get below)
quota

Check status of jobs:
qstat -u jheglun2
Q: job in queue
R: job running
C: job complete

Delete Job:
qdel JOB_ID

Check max walltime for your queue:
qstat -q {eng-research or eng-research-g} (48 hours max for these queues)
###########################################
An interactive job allows you to see the output of your code in the terminal.  It's like running the code on your computer, but with (potentially) better hardware.  You must maintain a network connection during the entire job, otherwise your code will stop running.

If running interactive jobs, get on a compute node by running a qsub command:
Ex:
qsub -I -e -o -m be -q eng-research-g -l walltime=00:30:00,nodes=1:ppn=16:P100

Command Explanation:
-I: you want an interactive job

-e: create an error file after the program finishes

-o: create an output file after the program finishes

-m be: send email at start and end of job

-q: specify the type of node you want to run on
eng-research: cpu and RAM only
eng-research-g: GPU jobs (ye)

-l: set walltime and node stuff
walltime=00:30:00,nodes=1:ppn=16:GPU_NAME
walltime has 30 minute max walltime for interactive jobs
nodes = {1,2,....}
cores per node = {16, 20, 24, 28}
GPU_NAME = {TeslaM2090, TeslaK40M, K80, P100}

###########################################
Once on the interactive node, load up relevant modules
module load python/3
module load anaconda/3
module load cuda/9.2
source activate py37

###########################################
Now copy over your relevant files that you want to run.

Now you're ready to run code in an interactive job.

###########################################
I installed all my python libraries under a conda environment called py37. See explanation below.
Install all your libraries in a conda virtual environment, see details here https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html

Match this conda environment to your own computer so they have the same versions of the libraries.  I used pip freeze to get a list of the installed libraries on my computer.  Copy-paste this list into a text editor, then appended 'conda install' before each entry in the list, then copy-pasted into the cluster terminal.

The following installations can't be done with the pip freeze method described above. Copy-paste the text below into into the cluster terminal to install gym and setuptools.

pip install gym==0.10.8
pip install gym-cap==1.0
conda install -c anaconda setuptools
